# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_functionality/Gettting_TransformRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Gettting_TransformRequest(genpy.Message):
  _md5sum = "eb2973aa1cf0610d54f3677ba9015c26"
  _type = "robot_functionality/Gettting_TransformRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Request 
string Frame_id
string Child_Frame_id
"""
  __slots__ = ['Frame_id','Child_Frame_id']
  _slot_types = ['string','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Frame_id,Child_Frame_id

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Gettting_TransformRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Frame_id is None:
        self.Frame_id = ''
      if self.Child_Frame_id is None:
        self.Child_Frame_id = ''
    else:
      self.Frame_id = ''
      self.Child_Frame_id = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.Frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Child_Frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Child_Frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Child_Frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.Frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Child_Frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Child_Frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Child_Frame_id = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_functionality/Gettting_TransformResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class Gettting_TransformResponse(genpy.Message):
  _md5sum = "6f385f95c3287739c267f3e35e012760"
  _type = "robot_functionality/Gettting_TransformResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Response
geometry_msgs/TransformStamped Transform
bool Success

================================================================================
MSG: geometry_msgs/TransformStamped
# This expresses a transform from coordinate frame header.frame_id
# to the coordinate frame child_frame_id
#
# This message is mostly used by the 
# <a href="http://wiki.ros.org/tf">tf</a> package. 
# See its documentation for more information.

Header header
string child_frame_id # the frame id of the child frame
Transform transform

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['Transform','Success']
  _slot_types = ['geometry_msgs/TransformStamped','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Transform,Success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Gettting_TransformResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Transform is None:
        self.Transform = geometry_msgs.msg.TransformStamped()
      if self.Success is None:
        self.Success = False
    else:
      self.Transform = geometry_msgs.msg.TransformStamped()
      self.Success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.Transform.header.seq, _x.Transform.header.stamp.secs, _x.Transform.header.stamp.nsecs))
      _x = self.Transform.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Transform.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7dB().pack(_x.Transform.transform.translation.x, _x.Transform.transform.translation.y, _x.Transform.transform.translation.z, _x.Transform.transform.rotation.x, _x.Transform.transform.rotation.y, _x.Transform.transform.rotation.z, _x.Transform.transform.rotation.w, _x.Success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.Transform is None:
        self.Transform = geometry_msgs.msg.TransformStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Transform.header.seq, _x.Transform.header.stamp.secs, _x.Transform.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Transform.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Transform.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Transform.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Transform.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 57
      (_x.Transform.transform.translation.x, _x.Transform.transform.translation.y, _x.Transform.transform.translation.z, _x.Transform.transform.rotation.x, _x.Transform.transform.rotation.y, _x.Transform.transform.rotation.z, _x.Transform.transform.rotation.w, _x.Success,) = _get_struct_7dB().unpack(str[start:end])
      self.Success = bool(self.Success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.Transform.header.seq, _x.Transform.header.stamp.secs, _x.Transform.header.stamp.nsecs))
      _x = self.Transform.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Transform.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7dB().pack(_x.Transform.transform.translation.x, _x.Transform.transform.translation.y, _x.Transform.transform.translation.z, _x.Transform.transform.rotation.x, _x.Transform.transform.rotation.y, _x.Transform.transform.rotation.z, _x.Transform.transform.rotation.w, _x.Success))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.Transform is None:
        self.Transform = geometry_msgs.msg.TransformStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.Transform.header.seq, _x.Transform.header.stamp.secs, _x.Transform.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Transform.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Transform.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.Transform.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.Transform.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 57
      (_x.Transform.transform.translation.x, _x.Transform.transform.translation.y, _x.Transform.transform.translation.z, _x.Transform.transform.rotation.x, _x.Transform.transform.rotation.y, _x.Transform.transform.rotation.z, _x.Transform.transform.rotation.w, _x.Success,) = _get_struct_7dB().unpack(str[start:end])
      self.Success = bool(self.Success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7dB = None
def _get_struct_7dB():
    global _struct_7dB
    if _struct_7dB is None:
        _struct_7dB = struct.Struct("<7dB")
    return _struct_7dB
class Gettting_Transform(object):
  _type          = 'robot_functionality/Gettting_Transform'
  _md5sum = 'a7995ca0c7b7430d83491b182946f79d'
  _request_class  = Gettting_TransformRequest
  _response_class = Gettting_TransformResponse
